// Sketch Plugin: Generate Icon Skate (cmd alt e)
// Source: github.com/kodlian/IconSlate-sketchplugin
// Version: 1.0



// Preferences
function safeKey(key) {
    return 'com.kodlian.icon-slate.'+key
}
function getUserDefault(key,defaultValue) {
    var value = [[NSUserDefaults standardUserDefaults] objectForKey:safeKey(key)]
    if (value == nil) {
        value = defaultValue
    }
    return value
}
function saveUserDefault(key,value){
    [[NSUserDefaults standardUserDefaults] setObject:value forKey:safeKey(key)]
}

// Filename increment
FileNames = {}

function fileName(name){
    if (FileNames[name] != undefined) {
        FileNames[name] = FileNames[name] + 1
        name +='-'+FileNames[name]
    }
    else {
        FileNames[name] = 1
    }
    return name
}

// Export
function exportDoc(directory, option) {
    var currentPage = [doc currentPage],
    success = false
    
    if (option.onlyCurrentPage == true) {
        success = exportPage(currentPage, directory, option)
    }
    else {
        var pageCount = [[doc pages] count]
        for (var p = 0; p < pageCount; p++) {
            var page = [doc pages][p]
            [doc setCurrentPage:page] // Set current page to be able to export correctly the artboard
            
            if(exportPage(page, directory, option)) {
                success = true
            }
        }
        [doc setCurrentPage:currentPage] // Restore current page
    }
    
    return success
}
function exportPage(page, directory, option) {
    var artboardCount = [[page artboards] count],
    success = false
    
    var name = [page name]
    name = fileName(name)
    
    var pageDirectory = directory + '/' + name + '/'
    
    // Export each artboards within the page
    for (var a = 0; a < artboardCount; a++) {
        var artboard = [page artboards][a]
        var artboardName = [artboard name]
        artboardName = fileName(artboardName)
        var artboardFilename = pageDirectory
        if ( option.combineArtboard == false ) {  // Save artboards directly inside the page folder
            artboardFilename += artboardName +'/'
        }
        artboardFilename += artboardName+'.png'
        [doc saveArtboardOrSlice:artboard toFile:artboardFilename]
        success = true
    }
    
    return success
}

// UI
function exportPanel(directory) {
    var openPanel = [NSOpenPanel openPanel]
    [openPanel setCanChooseDirectories:true]
    [openPanel setCanChooseFiles:false]
    [openPanel setCanCreateDirectories:true]
    [openPanel setDirectoryURL:[NSURL fileURLWithPath:directory]]
    
    [openPanel setTitle:@"Choose a directory to export"]
    [openPanel setPrompt:@"Export"]
    
    
    // Accessory
    // Formats + Type
    var accessoryView = [[NSView alloc] initWithFrame:NSMakeRect(0,0,440,25)]
    
    // Type
    label = [[NSTextField  alloc] initWithFrame:NSMakeRect(0,5,50,17)]
    [label setStringValue:'Export']
    [label setEditable:false]
    [label setBezeled:false]
    [label setSelectable:false]
    [label setDrawsBackground:false]
    [accessoryView addSubview:label]
    
    var types = ['all pages (combine artboards)','current page (combine artboards)', 'all artboards', 'current page\'s artboards']
    var exportType =  getUserDefault('exportType',0)
    var typeSelector = [[NSPopUpButton alloc] initWithFrame:NSMakeRect(50,0,240,25)]
    [typeSelector addItemsWithTitles:types]
    [typeSelector selectItemAtIndex:exportType]
    [accessoryView addSubview:typeSelector]
    
    [openPanel setAccessoryView:accessoryView]
    
    
    
    // Formats
    var label = [[NSTextField  alloc] initWithFrame:NSMakeRect(300,5,50,17)]
    [label setStringValue:'Format']
    [label setEditable:false]
    [label setBezeled:false]
    [label setSelectable:false]
    [label setDrawsBackground:false]
    [accessoryView addSubview:label]
    
    var formats = ['icns','iconset','ico','iOS','android','folder']
    var findex = getUserDefault('format',0)
    var formatSelector = [[NSPopUpButton alloc] initWithFrame:NSMakeRect(350,0,90,25)]
    [formatSelector addItemsWithTitles:formats]
    [formatSelector selectItemAtIndex:findex]
    [accessoryView addSubview:formatSelector]
    
    
    // Run
    var result = [openPanel runModal]
    
    // Result
    if (result == NSFileHandlingPanelOKButton) {
        findex = [formatSelector indexOfSelectedItem]
        saveUserDefault('format',findex)
        var formatName = formats[findex]
        exportType = [typeSelector indexOfSelectedItem]
        
        saveUserDefault('exportType',exportType)
        return {URLs:[openPanel URLs], format:formatName,combineArtboard:exportType < 2,onlyCurrentPage:exportType % 2 != 0 }
        
    }
    
    return null
}
function showAlert(message) {
    var app = [NSApplication sharedApplication];
    [app displayDialog:message withTitle: "Icon Slate can't export"]
}

// Remove file
function remove(path) {
    var m = [NSFileManager defaultManager]
    if ([m fileExistsAtPath:path])
    [m removeItemAtPath:path error:nil];
}

// Main
(function() {
    try {
        
        var app = [SBApplication application:"Icon Slate"]
        if (app == nil) {
            showAlert("This plguin requires Icon Slate.")
            return
        }
        var directory = getUserDefault('directory','~/Documents/')
        
        result = exportPanel(directory)
        if (result != null) {
            var URLs = result.URLs
            var urlCount = [URLs count]
            if (urlCount > 0 ) {
                
                
                var directoryURL = [URLs firstObject]
                directory = [directoryURL path]
                saveUserDefault('directory',directory)
                
                // Export artboard as png in a tempory directory
                directory +=  '/.iconslate/'
                remove(directory)
                
                if (!exportDoc(directory,result)){
                    showAlert("There is nothing to export.")
                    remove(directory)
                    return
                }
                
                // Convert Using Icon Slate
                var wasRunning = [app isRunning]
                if (!wasRunning) {
                    [app activate]
                }
                var sourceURL = [NSURL fileURLWithPath:directory]
                var format = result.format
                var icons = [app convertImagesInDirectory:sourceURL toFormatNamed:format intoDirectory:directoryURL]
                
                // Clean and restore app state
                remove(directory)
                
                if (!wasRunning) {
                    [app quit]
                }
                
                // Present results
                if (icons == nil) {
                    showAlert("Export has failed.")
                    return
                }
                var iconsCount = [icons count]
                if (iconsCount > 0){
                    var finishAlert = [NSAlert alertWithMessageText:"Export As Icon succeeded!" defaultButton:"Done" alternateButton:"Reveal In Finder" otherButton:nil informativeTextWithFormat:""]
                    var responseCode = [finishAlert runModal]
                    if (responseCode == NSAlertAlternateReturn) {
                        [[NSWorkspace sharedWorkspace] activateFileViewerSelectingURLs:icons];
                    }
                }
                else {
                    showAlert("Export has failed.")
                }
                
                
            }
        }
    } catch(e) {
        log(e)
    }
})();
